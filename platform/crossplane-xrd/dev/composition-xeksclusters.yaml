apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  labels:
    provider: aws
    service: eks
  name: eks-cluster-composition
spec:
  compositeTypeRef:
    apiVersion: infrastructure.skylab.com/v1alpha1
    kind: XEKSCluster
  mode: Resources
  publishConnectionDetailsWithStoreConfigRef:
    name: default
  resources:
    - base:
        apiVersion: ec2.aws.crossplane.io/v1beta1
        kind: VPC
        spec:
          forProvider:
            enableDnsHostNames: true
            enableDnsSupport: true
            instanceTenancy: default
            tags:
              - key: ManagedBy
                value: crossplane
              - key: Environment
                value: ""
              - key: ClusterType
                value: ""
          providerConfigRef:
            name: default
      name: vpc
      patches:
        - fromFieldPath: spec.region
          toFieldPath: spec.forProvider.region
          type: FromCompositeFieldPath
        - fromFieldPath: spec.vpcCidr
          toFieldPath: spec.forProvider.cidrBlock
          type: FromCompositeFieldPath
        - fromFieldPath: spec.clusterName
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-vpc'
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: spec.clusterName
          toFieldPath: spec.forProvider.tags[0].value
          transforms:
            - string:
                fmt: '%s-vpc'
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: spec.environment
          toFieldPath: spec.forProvider.tags[1].value
          type: FromCompositeFieldPath
        - fromFieldPath: spec.clusterType
          toFieldPath: spec.forProvider.tags[2].value
          type: FromCompositeFieldPath
      readinessChecks:
        - matchCondition:
            status: 'True'
            type: Ready
          type: MatchCondition
    - base:
        apiVersion: ec2.aws.crossplane.io/v1beta1
        kind: InternetGateway
        spec:
          forProvider:
            tags:
              - key: ManagedBy
                value: crossplane
              - key: Environment
                value: ""
          providerConfigRef:
            name: default
      name: igw
      patches:
        - fromFieldPath: spec.region
          toFieldPath: spec.forProvider.region
          type: FromCompositeFieldPath
        - fromFieldPath: spec.clusterName
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-igw'
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: spec.clusterName
          toFieldPath: spec.forProvider.vpcIdRef.name
          transforms:
            - string:
                fmt: '%s-vpc'
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: spec.clusterName
          toFieldPath: spec.forProvider.tags[0].value
          transforms:
            - string:
                fmt: '%s-igw'
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: spec.environment
          toFieldPath: spec.forProvider.tags[1].value
          type: FromCompositeFieldPath
      readinessChecks:
        - matchCondition:
            status: 'True'
            type: Ready
          type: MatchCondition
    - base:
        apiVersion: ec2.aws.crossplane.io/v1beta1
        kind: Subnet
        spec:
          forProvider:
            mapPublicIPOnLaunch: true
            tags:
              - key: ManagedBy
                value: crossplane
              - key: Environment
                value: ""
          providerConfigRef:
            name: default
      name: subnet-1
      patches:
        - fromFieldPath: spec.region
          toFieldPath: spec.forProvider.region
          type: FromCompositeFieldPath
        - fromFieldPath: spec.region
          toFieldPath: spec.forProvider.availabilityZone
          transforms:
            - string:
                fmt: '%sa'
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: spec.subnetCidrs[0]
          toFieldPath: spec.forProvider.cidrBlock
          type: FromCompositeFieldPath
        - fromFieldPath: spec.clusterName
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-subnet-1'
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: spec.clusterName
          toFieldPath: spec.forProvider.vpcIdRef.name
          transforms:
            - string:
                fmt: '%s-vpc'
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: spec.clusterName
          toFieldPath: spec.forProvider.tags[0].value
          transforms:
            - string:
                fmt: '%s-subnet-1'
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: spec.environment
          toFieldPath: spec.forProvider.tags[1].value
          type: FromCompositeFieldPath
      readinessChecks:
        - matchCondition:
            status: 'True'
            type: Ready
          type: MatchCondition
    - base:
        apiVersion: ec2.aws.crossplane.io/v1beta1
        kind: Subnet
        spec:
          forProvider:
            mapPublicIPOnLaunch: true
            tags:
              - key: ManagedBy
                value: crossplane
              - key: Environment
                value: ""
          providerConfigRef:
            name: default
      name: subnet-2
      patches:
        - fromFieldPath: spec.region
          toFieldPath: spec.forProvider.region
          type: FromCompositeFieldPath
        - fromFieldPath: spec.region
          toFieldPath: spec.forProvider.availabilityZone
          transforms:
            - string:
                fmt: '%sc'
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: spec.subnetCidrs[1]
          toFieldPath: spec.forProvider.cidrBlock
          type: FromCompositeFieldPath
        - fromFieldPath: spec.clusterName
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-subnet-2'
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: spec.clusterName
          toFieldPath: spec.forProvider.vpcIdRef.name
          transforms:
            - string:
                fmt: '%s-vpc'
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: spec.clusterName
          toFieldPath: spec.forProvider.tags[0].value
          transforms:
            - string:
                fmt: '%s-subnet-2'
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: spec.environment
          toFieldPath: spec.forProvider.tags[1].value
          type: FromCompositeFieldPath
      readinessChecks:
        - matchCondition:
            status: 'True'
            type: Ready
          type: MatchCondition
    - base:
        apiVersion: ec2.aws.crossplane.io/v1beta1
        kind: RouteTable
        spec:
          forProvider:
            routes:
              - destinationCidrBlock: 0.0.0.0/0
            associations:
              - subnetIdRef:
                  name: ""
              - subnetIdRef:
                  name: ""
            tags:
              - key: ManagedBy
                value: crossplane
              - key: Environment
                value: ""
          providerConfigRef:
            name: default
      name: route-table
      patches:
        - fromFieldPath: spec.region
          toFieldPath: spec.forProvider.region
          type: FromCompositeFieldPath
        - fromFieldPath: spec.clusterName
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-public-rt'
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: spec.clusterName
          toFieldPath: spec.forProvider.vpcIdRef.name
          transforms:
            - string:
                fmt: '%s-vpc'
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: spec.clusterName
          toFieldPath: spec.forProvider.routes[0].gatewayIdRef.name
          transforms:
            - string:
                fmt: '%s-igw'
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: spec.clusterName
          toFieldPath: spec.forProvider.associations[0].subnetIdRef.name
          transforms:
            - string:
                fmt: '%s-subnet-1'
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: spec.clusterName
          toFieldPath: spec.forProvider.associations[1].subnetIdRef.name
          transforms:
            - string:
                fmt: '%s-subnet-2'
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: spec.clusterName
          toFieldPath: spec.forProvider.tags[0].value
          transforms:
            - string:
                fmt: '%s-public-rt'
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: spec.environment
          toFieldPath: spec.forProvider.tags[1].value
          type: FromCompositeFieldPath
      readinessChecks:
        - matchCondition:
            status: 'True'
            type: Ready
          type: MatchCondition
    - base:
        apiVersion: ec2.aws.crossplane.io/v1beta1
        kind: SecurityGroup
        spec:
          forProvider:
            description: EKS cluster security group
            egress:
              - fromPort: -1
                ipProtocol: '-1'
                ipRanges:
                  - cidrIp: 0.0.0.0/0
                toPort: -1
            ingress:
              - fromPort: 443
                toPort: 443
                ipProtocol: tcp
                ipRanges:
                  - cidrIp: 0.0.0.0/0
            tags:
              - key: ManagedBy
                value: crossplane
              - key: Environment
                value: ""
          providerConfigRef:
            name: default
      name: security-group
      patches:
        - fromFieldPath: spec.region
          toFieldPath: spec.forProvider.region
          type: FromCompositeFieldPath
        - fromFieldPath: spec.clusterName
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-sg'
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: spec.clusterName
          toFieldPath: spec.forProvider.groupName
          transforms:
            - string:
                fmt: '%s-sg'
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: spec.clusterName
          toFieldPath: spec.forProvider.vpcIdRef.name
          transforms:
            - string:
                fmt: '%s-vpc'
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: spec.allowedCidrs[0]
          toFieldPath: spec.forProvider.ingress[0].ipRanges[0].cidrIp
          type: FromCompositeFieldPath
        - fromFieldPath: spec.clusterName
          toFieldPath: spec.forProvider.tags[0].value
          transforms:
            - string:
                fmt: '%s-sg'
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: spec.environment
          toFieldPath: spec.forProvider.tags[1].value
          type: FromCompositeFieldPath
      readinessChecks:
        - matchCondition:
            status: 'True'
            type: Ready
          type: MatchCondition
    - base:
        apiVersion: iam.aws.crossplane.io/v1beta1
        kind: Role
        spec:
          forProvider:
            assumeRolePolicyDocument: |
              {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": "eks.amazonaws.com"
                    },
                    "Action": "sts:AssumeRole"
                  }
                ]
              }
            tags:
              - key: ManagedBy
                value: crossplane
              - key: Environment
                value: ""
          providerConfigRef:
            name: default
      name: cluster-role
      patches:
        - fromFieldPath: spec.clusterName
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-cluster-role'
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: spec.clusterName
          toFieldPath: spec.forProvider.tags[0].value
          transforms:
            - string:
                fmt: '%s-cluster-role'
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: spec.environment
          toFieldPath: spec.forProvider.tags[1].value
          type: FromCompositeFieldPath
      readinessChecks:
        - matchCondition:
            status: 'True'
            type: Ready
          type: MatchCondition
    - base:
        apiVersion: iam.aws.crossplane.io/v1beta1
        kind: RolePolicyAttachment
        spec:
          forProvider:
            policyArn: arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
          providerConfigRef:
            name: default
      name: cluster-policy
      patches:
        - fromFieldPath: spec.clusterName
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-cluster-policy'
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: spec.clusterName
          toFieldPath: spec.forProvider.roleNameRef.name
          transforms:
            - string:
                fmt: '%s-cluster-role'
                type: Format
              type: string
          type: FromCompositeFieldPath
      readinessChecks:
        - matchCondition:
            status: 'True'
            type: Ready
          type: MatchCondition
    - base:
        apiVersion: iam.aws.crossplane.io/v1beta1
        kind: Role
        spec:
          forProvider:
            assumeRolePolicyDocument: |
              {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": "ec2.amazonaws.com"
                    },
                    "Action": "sts:AssumeRole"
                  }
                ]
              }
            tags:
              - key: ManagedBy
                value: crossplane
              - key: Environment
                value: ""
          providerConfigRef:
            name: default
      name: node-role
      patches:
        - fromFieldPath: spec.clusterName
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-node-role'
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: spec.clusterName
          toFieldPath: spec.forProvider.tags[0].value
          transforms:
            - string:
                fmt: '%s-node-role'
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: spec.environment
          toFieldPath: spec.forProvider.tags[1].value
          type: FromCompositeFieldPath
      readinessChecks:
        - matchCondition:
            status: 'True'
            type: Ready
          type: MatchCondition
    - base:
        apiVersion: iam.aws.crossplane.io/v1beta1
        kind: RolePolicyAttachment
        spec:
          forProvider:
            policyArn: arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
          providerConfigRef:
            name: default
      name: worker-node-policy
      patches:
        - fromFieldPath: spec.clusterName
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-worker-node-policy'
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: spec.clusterName
          toFieldPath: spec.forProvider.roleNameRef.name
          transforms:
            - string:
                fmt: '%s-node-role'
                type: Format
              type: string
          type: FromCompositeFieldPath
      readinessChecks:
        - matchCondition:
            status: 'True'
            type: Ready
          type: MatchCondition
    - base:
        apiVersion: iam.aws.crossplane.io/v1beta1
        kind: RolePolicyAttachment
        spec:
          forProvider:
            policyArn: arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
          providerConfigRef:
            name: default
      name: cni-policy
      patches:
        - fromFieldPath: spec.clusterName
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-cni-policy'
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: spec.clusterName
          toFieldPath: spec.forProvider.roleNameRef.name
          transforms:
            - string:
                fmt: '%s-node-role'
                type: Format
              type: string
          type: FromCompositeFieldPath
      readinessChecks:
        - matchCondition:
            status: 'True'
            type: Ready
          type: MatchCondition
    - base:
        apiVersion: iam.aws.crossplane.io/v1beta1
        kind: RolePolicyAttachment
        spec:
          forProvider:
            policyArn: arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
          providerConfigRef:
            name: default
      name: ecr-policy
      patches:
        - fromFieldPath: spec.clusterName
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-ecr-policy'
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: spec.clusterName
          toFieldPath: spec.forProvider.roleNameRef.name
          transforms:
            - string:
                fmt: '%s-node-role'
                type: Format
              type: string
          type: FromCompositeFieldPath
      readinessChecks:
        - matchCondition:
            status: 'True'
            type: Ready
          type: MatchCondition
    - base:
        apiVersion: eks.aws.crossplane.io/v1beta1
        kind: Cluster
        spec:
          forProvider:
            resourcesVpcConfig:
              endpointPrivateAccess: false
              endpointPublicAccess: true
              securityGroupIdRefs:
                - name: ""
              subnetIdRefs:
                - name: ""
                - name: ""
            tags:
              ManagedBy: crossplane
              Environment: ""
              ClusterType: ""
          providerConfigRef:
            name: default
          writeConnectionSecretToRef:
            namespace: crossplane-system
      name: eks-cluster
      patches:
        - fromFieldPath: spec.region
          toFieldPath: spec.forProvider.region
          type: FromCompositeFieldPath
        - fromFieldPath: spec.kubernetesVersion
          toFieldPath: spec.forProvider.version
          type: FromCompositeFieldPath
        - fromFieldPath: spec.clusterName
          toFieldPath: metadata.name
          type: FromCompositeFieldPath
        - fromFieldPath: spec.clusterName
          toFieldPath: spec.forProvider.roleArnRef.name
          transforms:
            - string:
                fmt: '%s-cluster-role'
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: spec.clusterName
          toFieldPath: spec.forProvider.resourcesVpcConfig.securityGroupIdRefs[0].name
          transforms:
            - string:
                fmt: '%s-sg'
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: spec.clusterName
          toFieldPath: spec.forProvider.resourcesVpcConfig.subnetIdRefs[0].name
          transforms:
            - string:
                fmt: '%s-subnet-1'
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: spec.clusterName
          toFieldPath: spec.forProvider.resourcesVpcConfig.subnetIdRefs[1].name
          transforms:
            - string:
                fmt: '%s-subnet-2'
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: spec.clusterName
          toFieldPath: spec.forProvider.tags.ManagedBy
          type: FromCompositeFieldPath
        - fromFieldPath: spec.environment
          toFieldPath: spec.forProvider.tags.Environment
          type: FromCompositeFieldPath
        - fromFieldPath: spec.clusterType
          toFieldPath: spec.forProvider.tags.ClusterType
          type: FromCompositeFieldPath
        - fromFieldPath: spec.clusterName
          toFieldPath: spec.writeConnectionSecretToRef.name
          transforms:
            - string:
                fmt: '%s-conn'
                type: Format
              type: string
          type: FromCompositeFieldPath
      readinessChecks:
        - matchCondition:
            status: 'True'
            type: Ready
          type: MatchCondition
    - base:
        apiVersion: eks.aws.crossplane.io/v1alpha1
        kind: NodeGroup
        spec:
          forProvider:
            scalingConfig:
              minSize: 1
            subnetRefs:
              - name: ""
              - name: ""
            tags:
              ManagedBy: crossplane
              Environment: ""
              ClusterType: ""
          providerConfigRef:
            name: default
      name: nodegroup
      patches:
        - fromFieldPath: spec.region
          toFieldPath: spec.forProvider.region
          type: FromCompositeFieldPath
        - fromFieldPath: spec.clusterName
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-nodegroup'
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: spec.clusterName
          toFieldPath: spec.forProvider.clusterNameRef.name
          type: FromCompositeFieldPath
        - fromFieldPath: spec.clusterName
          toFieldPath: spec.forProvider.nodeRoleRef.name
          transforms:
            - string:
                fmt: '%s-node-role'
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: spec.clusterName
          toFieldPath: spec.forProvider.subnetRefs[0].name
          transforms:
            - string:
                fmt: '%s-subnet-1'
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: spec.clusterName
          toFieldPath: spec.forProvider.subnetRefs[1].name
          transforms:
            - string:
                fmt: '%s-subnet-2'
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: spec.nodeCount
          toFieldPath: spec.forProvider.scalingConfig.desiredSize
          type: FromCompositeFieldPath
        - fromFieldPath: spec.nodeCount
          toFieldPath: spec.forProvider.scalingConfig.maxSize
          type: FromCompositeFieldPath
        - fromFieldPath: spec.nodeSize
          toFieldPath: spec.forProvider.instanceTypes[0]
          type: FromCompositeFieldPath
        - fromFieldPath: spec.clusterName
          toFieldPath: spec.forProvider.tags.ManagedBy
          transforms:
            - string:
                fmt: '%s-nodegroup'
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: spec.environment
          toFieldPath: spec.forProvider.tags.Environment
          type: FromCompositeFieldPath
        - fromFieldPath: spec.clusterType
          toFieldPath: spec.forProvider.tags.ClusterType
          type: FromCompositeFieldPath
      readinessChecks:
        - matchCondition:
            status: 'True'
            type: Ready
          type: MatchCondition
    - base:
        apiVersion: eks.aws.upbound.io/v1beta1
        kind: AccessEntry
        spec:
          forProvider:
            principalArn: ""
            type: STANDARD
            kubernetesGroups:
              - system:masters
            region:
      name: admin-access-entry-1
      patches:
        - fromFieldPath: spec.region
          toFieldPath: spec.forProvider.region
          type: FromCompositeFieldPath
        - fromFieldPath: spec.clusterName
          toFieldPath: spec.forProvider.clusterNameRef.name
          type: FromCompositeFieldPath
        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: spec.awsAccountId
              - fromFieldPath: spec.adminPrincipals[0].type
              - fromFieldPath: spec.adminPrincipals[0].name
            strategy: string
            string:
              fmt: "arn:aws:iam::%s:%s/%s"
          toFieldPath: spec.forProvider.principalArn
          policy:
            fromFieldPath: Optional
      readinessChecks:	
        - matchCondition:	
            status: 'True'	
            type: Ready	
          type: MatchCondition
    - base:
        apiVersion: eks.aws.upbound.io/v1beta1
        kind: AccessEntry
        spec:
          forProvider:
            principalArn: ""
            type: STANDARD
            kubernetesGroups:
              - system:masters
      name: admin-access-entry-2
      patches:
        - fromFieldPath: spec.region
          toFieldPath: spec.forProvider.region
          type: FromCompositeFieldPath
        - fromFieldPath: spec.clusterName
          toFieldPath: spec.forProvider.clusterNameRef.name
          type: FromCompositeFieldPath
        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: spec.awsAccountId
              - fromFieldPath: spec.adminPrincipals[1].type
              - fromFieldPath: spec.adminPrincipals[1].name
            strategy: string
            string:
              fmt: "arn:aws:iam::%s:%s/%s"
          toFieldPath: spec.forProvider.principalArn
          policy:
            fromFieldPath: Optional
      readinessChecks:	
        - matchCondition:	
            status: 'True'	
            type: Ready	
          type: MatchCondition
    - base:
        apiVersion: eks.aws.upbound.io/v1beta1
        kind: AccessEntry
        spec:
          forProvider:
            principalArn: ""
            type: STANDARD
            kubernetesGroups:
              - system:authenticated
      name: readonly-access-entry-1
      patches:
        - fromFieldPath: spec.region
          toFieldPath: spec.forProvider.region
          type: FromCompositeFieldPath
        - fromFieldPath: spec.clusterName
          toFieldPath: spec.forProvider.clusterNameRef.name
          type: FromCompositeFieldPath
        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: spec.awsAccountId
              - fromFieldPath: spec.readonlyPrincipals[0].type
              - fromFieldPath: spec.readonlyPrincipals[0].name
            strategy: string
            string:
              fmt: "arn:aws:iam::%s:%s/%s"
          toFieldPath: spec.forProvider.principalArn
          policy:
            fromFieldPath: Optional
      readinessChecks:	
        - matchCondition:	
            status: 'True'	
            type: Ready	
          type: MatchCondition
    - base:
        apiVersion: eks.aws.upbound.io/v1beta1
        kind: AccessEntry
        spec:
          forProvider:
            principalArn: ""
            type: STANDARD
            kubernetesGroups:
              - system:authenticated
      name: readonly-access-entry-2
      patches:
        - fromFieldPath: spec.region
          toFieldPath: spec.forProvider.region
          type: FromCompositeFieldPath
        - fromFieldPath: spec.clusterName
          toFieldPath: spec.forProvider.clusterNameRef.name
          type: FromCompositeFieldPath
        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: spec.awsAccountId
              - fromFieldPath: spec.readonlyPrincipals[1].type
              - fromFieldPath: spec.readonlyPrincipals[1].name
            strategy: string
            string:
              fmt: "arn:aws:iam::%s:%s/%s"
          toFieldPath: spec.forProvider.principalArn
          policy:
            fromFieldPath: Optional
      readinessChecks:	
        - matchCondition:	
            status: 'True'	
            type: Ready	
          type: MatchCondition
  writeConnectionSecretsToNamespace: crossplane-system