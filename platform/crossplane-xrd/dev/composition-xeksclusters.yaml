---
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: eks-cluster-composition
  labels:
    provider: aws
    service: eks
spec:
  writeConnectionSecretsToNamespace: crossplane-system
  compositeTypeRef:
    apiVersion: infrastructure.skylab.com/v1alpha1
    kind: XEKSCluster
  
  resources:
    # VPC
    - name: vpc
      base:
        apiVersion: ec2.aws.crossplane.io/v1beta1
        kind: VPC
        spec:
          forProvider:
            enableDnsHostNames: true
            enableDnsSupport: true
            instanceTenancy: default
            tags:
              - key: ManagedBy
                value: crossplane
          providerConfigRef:
            name: default
      patches:
        - type: FromCompositeFieldPath
          fromFieldPath: spec.region
          toFieldPath: spec.forProvider.region
        - type: FromCompositeFieldPath
          fromFieldPath: spec.vpcCidr
          toFieldPath: spec.forProvider.cidrBlock
        - type: FromCompositeFieldPath
          fromFieldPath: spec.clusterName
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-vpc"
        - type: FromCompositeFieldPath
          fromFieldPath: spec.clusterName
          toFieldPath: spec.forProvider.tags[0].value
          transforms:
            - type: string
              string:
                fmt: "%s-vpc"
        - type: FromCompositeFieldPath
          fromFieldPath: spec.environment
          toFieldPath: spec.forProvider.tags[1].key
          transforms:
            - type: string
              string:
                fmt: "Environment"
        - type: FromCompositeFieldPath
          fromFieldPath: spec.environment
          toFieldPath: spec.forProvider.tags[1].value
        - type: FromCompositeFieldPath
          fromFieldPath: spec.clusterType
          toFieldPath: spec.forProvider.tags[2].key
          transforms:
            - type: string
              string:
                fmt: "ClusterType"
        - type: FromCompositeFieldPath
          fromFieldPath: spec.clusterType
          toFieldPath: spec.forProvider.tags[2].value

    # Internet Gateway
    - name: igw
      base:
        apiVersion: ec2.aws.crossplane.io/v1beta1
        kind: InternetGateway
        spec:
          forProvider:
            tags:
              - key: ManagedBy
                value: crossplane
          providerConfigRef:
            name: default
      patches:
        - type: FromCompositeFieldPath
          fromFieldPath: spec.region
          toFieldPath: spec.forProvider.region
        - type: FromCompositeFieldPath
          fromFieldPath: spec.clusterName
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-igw"
        - type: FromCompositeFieldPath
          fromFieldPath: spec.clusterName
          toFieldPath: spec.forProvider.vpcIdRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-vpc"
        - type: FromCompositeFieldPath
          fromFieldPath: spec.clusterName
          toFieldPath: spec.forProvider.tags[0].value
          transforms:
            - type: string
              string:
                fmt: "%s-igw"
        - type: FromCompositeFieldPath
          fromFieldPath: spec.environment
          toFieldPath: spec.forProvider.tags[1].key
          transforms:
            - type: string
              string:
                fmt: "Environment"
        - type: FromCompositeFieldPath
          fromFieldPath: spec.environment
          toFieldPath: spec.forProvider.tags[1].value

    # Subnet 1
    - name: subnet-1
      base:
        apiVersion: ec2.aws.crossplane.io/v1beta1
        kind: Subnet
        spec:
          forProvider:
            mapPublicIpOnLaunch: true
            tags:
              - key: ManagedBy
                value: crossplane
          providerConfigRef:
            name: default
      patches:
        - type: FromCompositeFieldPath
          fromFieldPath: spec.region
          toFieldPath: spec.forProvider.region
        - type: FromCompositeFieldPath
          fromFieldPath: spec.region
          toFieldPath: spec.forProvider.availabilityZone
          transforms:
            - type: string
              string:
                fmt: "%sa"
        - type: FromCompositeFieldPath
          fromFieldPath: spec.subnetCidrs[0]
          toFieldPath: spec.forProvider.cidrBlock
        - type: FromCompositeFieldPath
          fromFieldPath: spec.clusterName
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-subnet-1"
        - type: FromCompositeFieldPath
          fromFieldPath: spec.clusterName
          toFieldPath: spec.forProvider.vpcIdRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-vpc"
        - type: FromCompositeFieldPath
          fromFieldPath: spec.clusterName
          toFieldPath: spec.forProvider.tags[0].value
          transforms:
            - type: string
              string:
                fmt: "%s-subnet-1"
        - type: FromCompositeFieldPath
          fromFieldPath: spec.environment
          toFieldPath: spec.forProvider.tags[1].key
          transforms:
            - type: string
              string:
                fmt: "Environment"
        - type: FromCompositeFieldPath
          fromFieldPath: spec.environment
          toFieldPath: spec.forProvider.tags[1].value

    # Subnet 2
    - name: subnet-2
      base:
        apiVersion: ec2.aws.crossplane.io/v1beta1
        kind: Subnet
        spec:
          forProvider:
            mapPublicIpOnLaunch: true
            tags:
              - key: ManagedBy
                value: crossplane
          providerConfigRef:
            name: default
      patches:
        - type: FromCompositeFieldPath
          fromFieldPath: spec.region
          toFieldPath: spec.forProvider.region
        - type: FromCompositeFieldPath
          fromFieldPath: spec.region
          toFieldPath: spec.forProvider.availabilityZone
          transforms:
            - type: string
              string:
                fmt: "%sc"
        - type: FromCompositeFieldPath
          fromFieldPath: spec.subnetCidrs[1]
          toFieldPath: spec.forProvider.cidrBlock
        - type: FromCompositeFieldPath
          fromFieldPath: spec.clusterName
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-subnet-2"
        - type: FromCompositeFieldPath
          fromFieldPath: spec.clusterName
          toFieldPath: spec.forProvider.vpcIdRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-vpc"
        - type: FromCompositeFieldPath
          fromFieldPath: spec.clusterName
          toFieldPath: spec.forProvider.tags[0].value
          transforms:
            - type: string
              string:
                fmt: "%s-subnet-2"
        - type: FromCompositeFieldPath
          fromFieldPath: spec.environment
          toFieldPath: spec.forProvider.tags[1].key
          transforms:
            - type: string
              string:
                fmt: "Environment"
        - type: FromCompositeFieldPath
          fromFieldPath: spec.environment
          toFieldPath: spec.forProvider.tags[1].value

    # Route Table
    - name: route-table
      base:
        apiVersion: ec2.aws.crossplane.io/v1beta1
        kind: RouteTable
        spec:
          forProvider:
            routes:
              - destinationCidrBlock: 0.0.0.0/0
            tags:
              - key: ManagedBy
                value: crossplane
          providerConfigRef:
            name: default
      patches:
        - type: FromCompositeFieldPath
          fromFieldPath: spec.region
          toFieldPath: spec.forProvider.region
        - type: FromCompositeFieldPath
          fromFieldPath: spec.clusterName
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-public-rt"
        - type: FromCompositeFieldPath
          fromFieldPath: spec.clusterName
          toFieldPath: spec.forProvider.vpcIdRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-vpc"
        - type: FromCompositeFieldPath
          fromFieldPath: spec.clusterName
          toFieldPath: spec.forProvider.routes[0].gatewayIdRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-igw"
        - type: FromCompositeFieldPath
          fromFieldPath: spec.clusterName
          toFieldPath: spec.forProvider.associations[0].subnetIdRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-subnet-1"
        - type: FromCompositeFieldPath
          fromFieldPath: spec.clusterName
          toFieldPath: spec.forProvider.associations[1].subnetIdRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-subnet-2"
        - type: FromCompositeFieldPath
          fromFieldPath: spec.clusterName
          toFieldPath: spec.forProvider.tags[0].value
          transforms:
            - type: string
              string:
                fmt: "%s-public-rt"
        - type: FromCompositeFieldPath
          fromFieldPath: spec.environment
          toFieldPath: spec.forProvider.tags[1].key
          transforms:
            - type: string
              string:
                fmt: "Environment"
        - type: FromCompositeFieldPath
          fromFieldPath: spec.environment
          toFieldPath: spec.forProvider.tags[1].value

    # Security Group
    - name: security-group
      base:
        apiVersion: ec2.aws.crossplane.io/v1beta1
        kind: SecurityGroup
        spec:
          forProvider:
            description: "EKS cluster security group"
            egress:
              - fromPort: -1
                ipProtocol: "-1"
                ipRanges:
                  - cidrIp: 0.0.0.0/0
                toPort: -1
            tags:
              - key: ManagedBy
                value: crossplane
          providerConfigRef:
            name: default
      patches:
        - type: FromCompositeFieldPath
          fromFieldPath: spec.region
          toFieldPath: spec.forProvider.region
        - type: FromCompositeFieldPath
          fromFieldPath: spec.clusterName
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-sg"
        - type: FromCompositeFieldPath
          fromFieldPath: spec.clusterName
          toFieldPath: spec.forProvider.groupName
          transforms:
            - type: string
              string:
                fmt: "%s-sg"
        - type: FromCompositeFieldPath
          fromFieldPath: spec.clusterName
          toFieldPath: spec.forProvider.vpcIdRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-vpc"
        - type: FromCompositeFieldPath
          fromFieldPath: spec.allowedCidrs
          toFieldPath: spec.forProvider.ingress[0].ipRanges
          transforms:
            - type: map
              map:
                cidrIp: "input"
        - type: FromCompositeFieldPath
          fromFieldPath: spec.clusterName
          toFieldPath: spec.forProvider.tags[0].value
          transforms:
            - type: string
              string:
                fmt: "%s-sg"
        - type: FromCompositeFieldPath
          fromFieldPath: spec.environment
          toFieldPath: spec.forProvider.tags[1].key
          transforms:
            - type: string
              string:
                fmt: "Environment"
        - type: FromCompositeFieldPath
          fromFieldPath: spec.environment
          toFieldPath: spec.forProvider.tags[1].value

    # EKS Cluster IAM Role
    - name: cluster-role
      base:
        apiVersion: iam.aws.crossplane.io/v1beta1
        kind: Role
        spec:
          forProvider:
            assumeRolePolicyDocument: |
              {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": "eks.amazonaws.com"
                    },
                    "Action": "sts:AssumeRole"
                  }
                ]
              }
            tags:
              - key: ManagedBy
                value: crossplane
          providerConfigRef:
            name: default
      patches:
        - type: FromCompositeFieldPath
          fromFieldPath: spec.clusterName
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-cluster-role"
        - type: FromCompositeFieldPath
          fromFieldPath: spec.clusterName
          toFieldPath: spec.forProvider.tags[0].value
          transforms:
            - type: string
              string:
                fmt: "%s-cluster-role"
        - type: FromCompositeFieldPath
          fromFieldPath: spec.environment
          toFieldPath: spec.forProvider.tags[1].key
          transforms:
            - type: string
              string:
                fmt: "Environment"
        - type: FromCompositeFieldPath
          fromFieldPath: spec.environment
          toFieldPath: spec.forProvider.tags[1].value

    # EKS Cluster IAM Role Policy Attachment
    - name: cluster-policy
      base:
        apiVersion: iam.aws.crossplane.io/v1beta1
        kind: RolePolicyAttachment
        spec:
          forProvider:
            policyArn: arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
          providerConfigRef:
            name: default
      patches:
        - type: FromCompositeFieldPath
          fromFieldPath: spec.clusterName
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-cluster-policy"
        - type: FromCompositeFieldPath
          fromFieldPath: spec.clusterName
          toFieldPath: spec.forProvider.roleNameRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-cluster-role"

    # Node Group IAM Role
    - name: node-role
      base:
        apiVersion: iam.aws.crossplane.io/v1beta1
        kind: Role
        spec:
          forProvider:
            assumeRolePolicyDocument: |
              {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": "ec2.amazonaws.com"
                    },
                    "Action": "sts:AssumeRole"
                  }
                ]
              }
            tags:
              - key: ManagedBy
                value: crossplane
          providerConfigRef:
            name: default
      patches:
        - type: FromCompositeFieldPath
          fromFieldPath: spec.clusterName
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-node-role"
        - type: FromCompositeFieldPath
          fromFieldPath: spec.clusterName
          toFieldPath: spec.forProvider.tags[0].value
          transforms:
            - type: string
              string:
                fmt: "%s-node-role"
        - type: FromCompositeFieldPath
          fromFieldPath: spec.environment
          toFieldPath: spec.forProvider.tags[1].key
          transforms:
            - type: string
              string:
                fmt: "Environment"
        - type: FromCompositeFieldPath
          fromFieldPath: spec.environment
          toFieldPath: spec.forProvider.tags[1].value

    # Node Group IAM Role Policy Attachments
    - name: worker-node-policy
      base:
        apiVersion: iam.aws.crossplane.io/v1beta1
        kind: RolePolicyAttachment
        spec:
          forProvider:
            policyArn: arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
          providerConfigRef:
            name: default
      patches:
        - type: FromCompositeFieldPath
          fromFieldPath: spec.clusterName
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-worker-node-policy"
        - type: FromCompositeFieldPath
          fromFieldPath: spec.clusterName
          toFieldPath: spec.forProvider.roleNameRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-node-role"

    - name: cni-policy
      base:
        apiVersion: iam.aws.crossplane.io/v1beta1
        kind: RolePolicyAttachment
        spec:
          forProvider:
            policyArn: arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
          providerConfigRef:
            name: default
      patches:
        - type: FromCompositeFieldPath
          fromFieldPath: spec.clusterName
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-cni-policy"
        - type: FromCompositeFieldPath
          fromFieldPath: spec.clusterName
          toFieldPath: spec.forProvider.roleNameRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-node-role"

    - name: ecr-policy
      base:
        apiVersion: iam.aws.crossplane.io/v1beta1
        kind: RolePolicyAttachment
        spec:
          forProvider:
            policyArn: arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
          providerConfigRef:
            name: default
      patches:
        - type: FromCompositeFieldPath
          fromFieldPath: spec.clusterName
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-ecr-policy"
        - type: FromCompositeFieldPath
          fromFieldPath: spec.clusterName
          toFieldPath: spec.forProvider.roleNameRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-node-role"

    # EKS Cluster
    - name: eks-cluster
      base:
        apiVersion: eks.aws.crossplane.io/v1beta1
        kind: Cluster
        spec:
          forProvider:
            resourcesVpcConfig:
              endpointPrivateAccess: false
              endpointPublicAccess: true
            tags:
              - key: ManagedBy
                value: crossplane
          providerConfigRef:
            name: default
          writeConnectionSecretToRef:
            namespace: crossplane-system
      patches:
        - type: FromCompositeFieldPath
          fromFieldPath: spec.region
          toFieldPath: spec.forProvider.region
        - type: FromCompositeFieldPath
          fromFieldPath: spec.kubernetesVersion
          toFieldPath: spec.forProvider.version
        - type: FromCompositeFieldPath
          fromFieldPath: spec.clusterName
          toFieldPath: metadata.name
        - type: FromCompositeFieldPath
          fromFieldPath: spec.clusterName
          toFieldPath: spec.forProvider.roleArnRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-cluster-role"
        - type: FromCompositeFieldPath
          fromFieldPath: spec.clusterName
          toFieldPath: spec.forProvider.resourcesVpcConfig.securityGroupIdRefs[0].name
          transforms:
            - type: string
              string:
                fmt: "%s-sg"
        - type: FromCompositeFieldPath
          fromFieldPath: spec.clusterName
          toFieldPath: spec.forProvider.resourcesVpcConfig.subnetIdRefs[0].name
          transforms:
            - type: string
              string:
                fmt: "%s-subnet-1"
        - type: FromCompositeFieldPath
          fromFieldPath: spec.clusterName
          toFieldPath: spec.forProvider.resourcesVpcConfig.subnetIdRefs[1].name
          transforms:
            - type: string
              string:
                fmt: "%s-subnet-2"
        - type: FromCompositeFieldPath
          fromFieldPath: spec.clusterName
          toFieldPath: spec.forProvider.tags[0].value
        - type: FromCompositeFieldPath
          fromFieldPath: spec.environment
          toFieldPath: spec.forProvider.tags[1].key
          transforms:
            - type: string
              string:
                fmt: "Environment"
        - type: FromCompositeFieldPath
          fromFieldPath: spec.environment
          toFieldPath: spec.forProvider.tags[1].value
        - type: FromCompositeFieldPath
          fromFieldPath: spec.clusterType
          toFieldPath: spec.forProvider.tags[2].key
          transforms:
            - type: string
              string:
                fmt: "ClusterType"
        - type: FromCompositeFieldPath
          fromFieldPath: spec.clusterType
          toFieldPath: spec.forProvider.tags[2].value
        - type: FromCompositeFieldPath
          fromFieldPath: spec.clusterName
          toFieldPath: spec.writeConnectionSecretToRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-conn"

    # EKS Node Group
    - name: nodegroup
      base:
        apiVersion: eks.aws.crossplane.io/v1alpha1
        kind: NodeGroup
        spec:
          forProvider:
            scalingConfig:
              minSize: 1
            tags:
              - key: ManagedBy
                value: crossplane
          providerConfigRef:
            name: default
      patches:
        - type: FromCompositeFieldPath
          fromFieldPath: spec.region
          toFieldPath: spec.forProvider.region
        - type: FromCompositeFieldPath
          fromFieldPath: spec.clusterName
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-nodegroup"
        - type: FromCompositeFieldPath
          fromFieldPath: spec.clusterName
          toFieldPath: spec.forProvider.clusterNameRef.name
        - type: FromCompositeFieldPath
          fromFieldPath: spec.clusterName
          toFieldPath: spec.forProvider.nodeRoleRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-node-role"
        - type: FromCompositeFieldPath
          fromFieldPath: spec.clusterName
          toFieldPath: spec.forProvider.subnetRefs[0].name
          transforms:
            - type: string
              string:
                fmt: "%s-subnet-1"
        - type: FromCompositeFieldPath
          fromFieldPath: spec.clusterName
          toFieldPath: spec.forProvider.subnetRefs[1].name
          transforms:
            - type: string
              string:
                fmt: "%s-subnet-2"
        - type: FromCompositeFieldPath
          fromFieldPath: spec.nodeCount
          toFieldPath: spec.forProvider.scalingConfig.desiredSize
        - type: FromCompositeFieldPath
          fromFieldPath: spec.nodeCount
          toFieldPath: spec.forProvider.scalingConfig.maxSize
        - type: FromCompositeFieldPath
          fromFieldPath: spec.nodeSize
          toFieldPath: spec.forProvider.instanceTypes[0]
        - type: FromCompositeFieldPath
          fromFieldPath: spec.clusterName
          toFieldPath: spec.forProvider.tags[0].value
          transforms:
            - type: string
              string:
                fmt: "%s-nodegroup"
        - type: FromCompositeFieldPath
          fromFieldPath: spec.environment
          toFieldPath: spec.forProvider.tags[1].key
          transforms:
            - type: string
              string:
                fmt: "Environment"
        - type: FromCompositeFieldPath
          fromFieldPath: spec.environment
          toFieldPath: spec.forProvider.tags[1].value
        - type: FromCompositeFieldPath
          fromFieldPath: spec.clusterType
          toFieldPath: spec.forProvider.tags[2].key
          transforms:
            - type: string
              string:
                fmt: "ClusterType"
        - type: FromCompositeFieldPath
          fromFieldPath: spec.clusterType
          toFieldPath: spec.forProvider.tags[2].value