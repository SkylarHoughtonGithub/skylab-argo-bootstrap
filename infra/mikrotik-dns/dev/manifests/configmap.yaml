---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mikrotik-dns-updater
  namespace: kube-system
data:
  update-dns.py: |
    #!/usr/bin/env python3
    import os
    import time
    import logging
    from kubernetes import client, config, watch
    from librouteros import connect
    
    # Configure logging
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
    logger = logging.getLogger(__name__)
    
    # MikroTik configuration
    MIKROTIK_HOST = os.getenv('MIKROTIK_HOST', '192.168.50.1')
    MIKROTIK_PORT = int(os.getenv('MIKROTIK_PORT', '8728'))
    MIKROTIK_USER = os.getenv('MIKROTIK_USER', 'admin')
    MIKROTIK_PASS = os.getenv('MIKROTIK_PASS', 'password')
    LOAD_BALANCER_IP = os.getenv('LOAD_BALANCER_IP', '192.168.50.38')
    
    class MikroTikDNSManager:
        def __init__(self, host, port, username, password):
            self.host = host
            self.port = port
            self.username = username
            self.password = password
            self.api = None
            
        def connect(self):
            """Connect to MikroTik router via API"""
            try:
                logger.info(f"Connecting to MikroTik at {self.host}:{self.port}")
                self.api = connect(
                    username=self.username,
                    password=self.password,
                    host=self.host,
                    port=self.port
                )
                
                # Test connection by getting system identity
                identity = list(self.api(cmd='/system/identity/print'))
                router_name = identity[0].get('name', 'Unknown') if identity else 'Unknown'
                logger.info(f"Successfully connected to MikroTik: {router_name}")
                return True
                
            except Exception as e:
                logger.error(f"Failed to connect to MikroTik: {e}")
                return False
    
        def disconnect(self):
            """Disconnect from MikroTik"""
            if self.api:
                try:
                    self.api.close()
                    logger.info("Disconnected from MikroTik")
                except:
                    pass
    
        def get_dns_records(self):
            """Get all DNS static records"""
            try:
                records = list(self.api(cmd='/ip/dns/static/print'))
                return records
            except Exception as e:
                logger.error(f"Failed to get DNS records: {e}")
                return []
    
        def add_dns_record(self, hostname, ip_address):
            """Add a DNS record to MikroTik"""
            try:
                # Check if record already exists
                existing_records = self.get_dns_records()
                for record in existing_records:
                    if record.get('name') == hostname:
                        if record.get('address') == ip_address:
                            logger.info(f"DNS record already exists: {hostname} -> {ip_address}")
                            return True
                        else:
                            # Update existing record
                            logger.info(f"Updating DNS record: {hostname} -> {ip_address}")
                            list(self.api(
                                cmd='/ip/dns/static/set',
                                **{'.id': record.get('.id'), 'address': ip_address}
                            ))
                            logger.info(f"Updated DNS record: {hostname} -> {ip_address}")
                            return True
                
                # Add new record
                logger.info(f"Adding new DNS record: {hostname} -> {ip_address}")
                result = list(self.api(
                    cmd='/ip/dns/static/add',
                    name=hostname,
                    address=ip_address,
                    ttl='1h'
                ))
                logger.info(f"Successfully added DNS record: {hostname} -> {ip_address} (result: {result})")
                
                # Verify the record was added
                updated_records = self.get_dns_records()
                for record in updated_records:
                    if record.get('name') == hostname and record.get('address') == ip_address:
                        logger.info(f"Verified DNS record exists: {hostname} -> {ip_address}")
                        return True
                
                logger.warning(f"DNS record was added but verification failed: {hostname}")
                return True  # Assume success even if verification fails
                
            except Exception as e:
                logger.error(f"Failed to add DNS record {hostname}: {e}")
                return False
    
        def remove_dns_record(self, hostname):
            """Remove a DNS record from MikroTik"""
            try:
                records = self.get_dns_records()
                removed = False
                
                for record in records:
                    if record.get('name') == hostname:
                        logger.info(f"Removing DNS record: {hostname} (ID: {record.get('.id')})")
                        list(self.api(
                            cmd='/ip/dns/static/remove',
                            **{'.id': record.get('.id')}
                        ))
                        logger.info(f"Successfully removed DNS record: {hostname}")
                        removed = True
                
                if not removed:
                    logger.warning(f"DNS record not found for removal: {hostname}")
                    
                return removed
                
            except Exception as e:
                logger.error(f"Failed to remove DNS record {hostname}: {e}")
                return False
    
    class IngressWatcher:
        def __init__(self, dns_manager):
            self.dns_manager = dns_manager
            # Load Kubernetes config
            try:
                config.load_incluster_config()
                logger.info("Loaded in-cluster Kubernetes config")
            except:
                config.load_kube_config()
                logger.info("Loaded local Kubernetes config")
            self.v1 = client.NetworkingV1Api()
            
        def process_existing_ingresses(self):
            """Process existing ingresses on startup"""
            logger.info("Processing existing ingresses...")
            try:
                ingresses = self.v1.list_ingress_for_all_namespaces()
                for ingress in ingresses.items:
                    annotations = ingress.metadata.annotations or {}
                    if annotations.get('dns-controller/manage-dns') == 'true':
                        if ingress.spec.rules:
                            for rule in ingress.spec.rules:
                                hostname = rule.host
                                if hostname:
                                    logger.info(f"Processing existing ingress: {hostname}")
                                    self.dns_manager.add_dns_record(hostname, LOAD_BALANCER_IP)
            except Exception as e:
                logger.error(f"Error processing existing ingresses: {e}")
            
        def watch_ingresses(self):
            """Watch for Ingress changes and update DNS accordingly"""
            logger.info("Starting Ingress watcher...")
            
            # Process existing ingresses first
            self.process_existing_ingresses()
            
            w = watch.Watch()
            
            while True:
                try:
                    for event in w.stream(self.v1.list_ingress_for_all_namespaces, timeout_seconds=300):
                        event_type = event['type']
                        ingress = event['object']
                        
                        # Check if this ingress has the annotation to manage DNS
                        annotations = ingress.metadata.annotations or {}
                        if annotations.get('dns-controller/manage-dns') != 'true':
                            continue
                            
                        # Extract hostname from ingress rules
                        if ingress.spec.rules:
                            for rule in ingress.spec.rules:
                                hostname = rule.host
                                if hostname:
                                    if event_type in ['ADDED', 'MODIFIED']:
                                        logger.info(f"Ingress {event_type}: {hostname}")
                                        self.dns_manager.add_dns_record(hostname, LOAD_BALANCER_IP)
                                    elif event_type == 'DELETED':
                                        logger.info(f"Ingress DELETED: {hostname}")
                                        self.dns_manager.remove_dns_record(hostname)
                                        
                except Exception as e:
                    logger.error(f"Error in watch loop: {e}")
                    logger.info("Reconnecting to MikroTik...")
                    # Reconnect to MikroTik
                    self.dns_manager.disconnect()
                    if not self.dns_manager.connect():
                        logger.error("Failed to reconnect to MikroTik")
                    time.sleep(10)  # Wait before retrying
    
    def main():
        logger.info("Starting MikroTik DNS Controller")
        
        # Initialize MikroTik DNS manager
        dns_manager = MikroTikDNSManager(MIKROTIK_HOST, MIKROTIK_PORT, MIKROTIK_USER, MIKROTIK_PASS)
        
        # Connect to MikroTik
        max_retries = 5
        retry_count = 0
        
        while retry_count < max_retries:
            if dns_manager.connect():
                break
            retry_count += 1
            logger.warning(f"Connection attempt {retry_count}/{max_retries} failed. Retrying in 10 seconds...")
            time.sleep(10)
        
        if retry_count >= max_retries:
            logger.error("Failed to connect to MikroTik after multiple attempts. Exiting.")
            return
            
        try:
            # Start watching ingresses
            watcher = IngressWatcher(dns_manager)
            watcher.watch_ingresses()
        except KeyboardInterrupt:
            logger.info("Received interrupt signal")
        except Exception as e:
            logger.error(f"Unexpected error: {e}")
        finally:
            dns_manager.disconnect()
    
    if __name__ == "__main__":
        main()

  requirements.txt: |
    kubernetes==27.2.0
    requests==2.31.0
    librouteros==3.2.0